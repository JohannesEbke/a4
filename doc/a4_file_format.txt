A4 Stream File Format
---------------------

Overview
--------

The A4 STREAM is a file format for sequences of 
Google Protocol Buffer (PB) messages. 

All definitions of the used Protocol Buffer Messages are also included,
making A4 a completely self-contained format.

Messages marked as metadata are accessible via an index, and the currently
relevant metadata may be accessed during reading by a special function.

Any A4 streams MUST have the property that concatenating them also
produces a valid A4 file with correct metadata information. This has to be
considered when adding metadata. Retrieved metadata from a concatenated file
MUST be either be not available or correct for the whole concatenated file.

Structure
---------

An A4 stream file MUST be delimited by magic byte strings:
* start magic bytes: "A4STREAM"
* end magic bytes: "KTHXBYE4"

A reader MUST check for the start magic bytes after if reaches the end 
magic bytes, since there can be another file concatenated.

Between these magic strings there are MESSAGES. Each MESSAGE starts
with a 32 bit little endian integer, containing the SIZE of the message in 
bytes in the low 30 bits. The highest bit MUST be set if the message is
not the default message type. The second highest bit is reserved.

SIZE = i1 & ((1<<31)-1)

If the highest bit is set, a second 32 bit little endian integer containing 
the CLASS ID of the following message MUST follow. This integer is not
part of the message, and not included in the size estimate.

The next SIZE bytes must be a valid PB message based on a shared specification.

After the start magic bytes there MUST follow a StreamHeader message,
including the size and type integers. The StreamHeader message has the
following protocol specification:

message StreamHeader
{
    option (fixed_class_id) = 100;
    required int32 a4_version = 1;
    optional string description = 2;

    // if metadata_refers_forward is true, metadata refer
    // to objects that follow them instead of precede them
    optional bool metadata_refers_forward = 5 [default=false];
}

The a4_version field MUST be set to 2 for this version of the protocol.
fixed_class_id indicates the class id for StreamHeader messages.

The description string is for human consumption only, and SHOULD contain
a description of the file contents.

At the end of the stream/file, an A4StreamFooter message is expected:

message StreamFooter
{
    option (fixed_class_id) = 101;

    // MUST be number of bytes written before the footer size byte
    required int64 size = 1;

    // MUST specify the offset from stream start of all metadata messages
    repeated int64 metadata_offsets = 2;

    // MUST specify the offset from stream start of all FileDescriptor messages
    repeated int64 file_descriptor_offsets = 3;
}

After an StreamFooter message, the size of that message is repeated as an
32-bit integer, to allow seeking backwards to the footer from the end of file.

google.protobuf.FileDescriptor messages - packed into a ProtoClass message - 
MUST be added with all its classes to to the descriptor pool for that Stream.
That pool MUST be used ONLY for that part of the stream where it was found.
The class_id specified in that message MUST NOT be used yet, and subsequently
refers to that message in the file descriptors with the given full name.

The reading should then be continued transparently.

message ProtoClass
{
    option (fixed_class_id) = 105;
    optional int32 class_id = 1;
    optional string full_name = 2;
    repeated google.protobuf.FileDescriptorProto file_descriptor = 3;
}

Messages that are intended to be written to A4 files at the top level MAY
provide versioning information via 

message MyEvent
{
    option (major_version) = "v2011.10";
    option (minor_version) = "fix42";
    option (patch_version) = "For my 83 run over the Data";
}

If this class is compiled in to an executable, it MUST check that the
major_version matches the major_version in the data, and SHOULD warn the user
in case the minor versions are different.

Compression
-----------

If a StartCompressionSection message is read, the reader should treat the 
file from that point as a compressed stream:

message StartCompressedSection
{
    option (fixed_class_id) = 102;
    enum Compression {
        ZLIB = 0;
        GZIP = 1;
        BZIP2 = 2;
    }
    optional Compression compression = 1;
}

The reader should then continue to read messages from the compressed stream.
This process MUST be transparent to the consumer of the messages (they should not
have to call read() again, for example).

If inside the compressed stream an EndCompressedSection message is read, after the
end of that message the compression should be ended and regular reads should resume.

message EndCompressedSection
{
    option (fixed_class_id) = 103;
}

Summary
-------

A4STREAM
<size|HIGH_BIT> <classid=100> StreamHeader (default class = 1000)
<size|HIGH_BIT> <classid=102> StartCompressedSection
  --start of compression--
    <size|HIGH_BIT><classid=1> Run Information Message
    <size> Event (classid 0 not specified)
    <size> Event
    <size> Event
    ...
    <size|HIGH_BIT><classid=103> A4EndCompressedSection
  --end of compression--
<size|HIGH_BIT><classid=101> A4StreamFooter
<size of A4StreamFooter again>
KTHXBYE4

