#!/usr/bin/env python


from optparse import OptionParser
parser = OptionParser()
parser.add_option("-a", "--all", action="store_true", help="make all histograms")
parser.add_option("-i", "--interactive", action="store_true", help="interactive plots")
parser.add_option("-d", "--data", action="append", default=[], help="data root file")
parser.add_option("-s", "--signal", action="append", default=[], help="signal root files")
parser.add_option("-o", "--output", default="", help="output directory for plots")
parser.add_option("-b", "--rebin", action="append", default=[], help="rebin factor")
parser.add_option("-p", "--histogram", action="append", default=[], help="histograms to plot (specify multiple times)")
parser.add_option("-x", "--xtitle", action="append", default=[], help="label of the x axis of the plot (specify multiple times)")
parser.add_option("-r", "--range", action="append", default=[], help="range of x axis of the plot, format: <nbins>,<start>-<end> or <start>-<end> or only <nbins> (specify multiple times)")
parser.add_option("-u", "--unit", action="append", default=[], help="units of the x axis of the plot")
parser.add_option("-c", "--compare", action="store_true", help="generate comparison plot of data/mc")
parser.add_option("-g", "--sigma", action="store_true", help="show significance plot (exclusive with compare)")

parser.add_option("--roostats", default=False, help="write out roostats file of all inputs ddand quit")
(options, args) = parser.parse_args()
import sys
sys.argv = []

from sys import exit
from rooplot import make_page
from rooplot import atlas_style, get_legend, get_lumi_label, set_styles, stack_1D, plot_1D, draw_preliminary
from os.path import join as pjoin, basename, extsep
from os import makedirs

disp = "1.02 fb^{-1}"

xtitles = dict(zip(options.histogram, options.xtitle))
xunits  = dict(zip(options.histogram, options.unit))
xrebin  = dict(zip(options.histogram, options.rebin))
x_range = dict(zip(options.histogram, options.range))

if not options.data and len(args) == 0:
    parser.print_help()
    exit(-1)

if options.output:
    try:
        makedirs(options.output)
    except OSError:
        pass

from atfile import ATFile

bg_files = [ATFile(fn) for fn in args]
sg_files = [ATFile(fn) for fn in options.signal]
data_files = [ATFile(d) for d in options.data]
all_files = data_files + bg_files + sg_files

histos_1d = sorted(set(sum((f.find_type("TH1D") for f in all_files), [])))
histos_2d = sorted(set(sum((f.find_type("TH2D") for f in all_files), [])))
if not options.all:
    histos_1d = [h for h in histos_1d if h in options.histogram]
    histos_2d = [h for h in histos_2d if h in options.histogram]

prefix = options.output
histograms = []

width, height = (800, 800) if options.compare or options.sigma else (800, 600)

def base(fn):
    return "_".join(basename(fn).split(extsep)[:-1])

from ROOT import TCanvas, kRed, TH1D
if options.roostats:
    from ROOT import TFile
    roostats_file = TFile(options.roostats, "RECREATE")


for hn in histos_1d:
    data_fns = [f.fn for f in data_files if hn in f.dir]
    bg_fns = [f.fn for f in bg_files if hn in f.dir]
    sg_fns = [f.fn for f in sg_files if hn in f.dir]
    data = [f.get(hn) for f in data_files if hn in f.dir]
    bg = [f.get(hn) for f in bg_files if hn in f.dir]
    sg = [f.get(hn) for f in sg_files if hn in f.dir]
    data_names = [base(f.fn) for f in data_files if hn in f.dir]
    bg_names = [base(f.fn) for f in bg_files if hn in f.dir]
    sg_names = [base(f.fn) for f in sg_files if hn in f.dir]

    xtitle, ytitle = None, None
    for h, orig_fn in zip(data+bg+sg, data_fns+bg_fns+sg_fns):
        h.SetDirectory(0)
        if not h.GetTitle():
            h.SetTitle(orig_fn.rstrip(".root"))
        if xrebin.get(hn,1) != 1:
            h.Rebin(int(xrebin[hn]))

        if xtitle is None:
            xtitle = xtitles.get(hn, "")
            x = h.GetXaxis()
            n, mn, mx = x.GetNbins(), x.GetBinLowEdge(x.GetFirst()), x.GetBinUpEdge(x.GetLast())
            delta = (mx-mn)/n
            if xunits.get(hn, ""):
                per_str = " / %s"%xunits[hn] if delta == 1 else " / %g %s" % (delta, xunits[hn])
                xtitle = "%s [%s]" % (xtitle, xunits[hn])
            else:
                if delta != 1:
                    per_str = " / %g" % delta
                else:
                    per_str = ""
            ytitle = "Entries%s" % per_str
        if xtitle:
            h.GetXaxis().SetTitle(xtitle)
        if ytitle:
            h.GetYaxis().SetTitle(ytitle)

    # Deal with cutflow histograms
    if (data+sg+bg)[0].GetXaxis().GetBinLabel(1):
        labels = map(str, (data+sg+bg)[0].GetXaxis().GetLabels())
        for h in data+sg+bg:
            for label in map(str,h.GetXaxis().GetLabels()):
                if not label in labels:
                    labels.append(label)
        def trafo(h):
            nh = TH1D(h.GetName(), h.GetTitle(), len(labels), 0, len(labels))
            nh.SetDirectory(0)
            for i, label in enumerate(labels):
                nh.GetXaxis().SetBinLabel(i+1, label)
                oi = h.GetXaxis().FindBin(label)
                if oi != -1:
                    nh.SetBinContent(i+1, h.GetBinContent(oi))
            return nh
        data = map(trafo, data)
        sg = map(trafo, sg)
        bg = map(trafo, bg)


    #set_styles(data, bg, sg)
    range = None
    rebin_to = None
    if x_range.get(hn, None):
        range = x_range[hn] 
        if "," in range:
            rebin_to, srange = range.split(",")
            rebin_to = int(rebin_to)
            range = map(float,srange.split("-"))
        elif "-" in range:
            rebin_to = None
            range = map(float, x_range[hn].split("-"))
        else:
            rebin_to = int(range)
            range = None

    def get_draw(log,cmp,sgm):
        def draw():
            legend, stack, summc, hsave, save = plot_1D(hn,data,bg,sg,lumi=disp,rebin_to=rebin_to,range=range,compare=cmp,sigma=sgm,log=log)
            if stack:
                if xtitle:
                    stack.GetXaxis().SetTitle(xtitle)
                if ytitle:
                    stack.GetYaxis().SetTitle(ytitle)
                #stack.GetXaxis().LabelsOption("v")
            return legend, stack, summc, hsave, save
        return draw

    if options.roostats:
        hist_base = hn.replace("/","_")
        hist_alt = xtitles.get(hn, "")
        if not " " in hist_alt:
            hist_base = hist_alt 
        for n, d in zip(data_names, data) + zip(bg_names, bg) + zip(sg_names, sg):
            roostats_file.WriteObject(d, "%s_%s" % (n, hist_base))

    elif options.interactive:
        histograms.append(TCanvas(hn,hn,width,height))
        histograms.append(get_draw(False, options.compare, options.sigma)())
    else:
        from rooplot import batch_mode
        pix = 1000
        width, height = int(width*pix*1.0/max(width,height)), int(height*pix*1.0/max(width,height))

        ghn = hn.replace("/","_")
        name = pjoin(prefix, ghn)
        title = ghn

        @batch_mode
        def write():
            c = TCanvas(name,title,width,height)
            histograms.extend(get_draw(False, options.compare, False)())
            c.cd()
            c.SaveAs("%s.%s" % (name,"png"))
            histograms.append(c)

            c = TCanvas(name+'_log',title+'_log',width,height)
            histograms.extend(get_draw(True, False, options.sigma)())
            c.cd()
            c.SaveAs("%s_log.%s" % (name,"png"))
            histograms.append(c)
        write()

if options.roostats:
    roostats_file.Close()

if options.interactive:
    raw_input("Press Enter to finish.")

#make_page(histograms, h.replace("/","_"), h.replace("/","_"), landscape=True, format="png")
#make_page(histograms, "plots", "plots", landscape=True, format="png")


    
