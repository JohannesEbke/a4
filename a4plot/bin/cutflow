#!/usr/bin/env python

from optparse import OptionParser
parser = OptionParser()
parser.add_option("-a", "--all", action="store_true", help="make all histograms")
parser.add_option("-n", "--ndigits", default=-1, help="print this many digits")
parser.add_option("-d", "--data", action="append", default=[], help="data root file")
parser.add_option("-s", "--signal", action="append", default=[], help="signal root files")
parser.add_option("-l", "--latex", action="store_true", help="print as full latex document")
parser.add_option("-o", "--output", default="", help="output directory for text files")
parser.add_option("-p", "--histogram", action="append", default=[], help="histograms to print (specify multiple times)")
(options, args) = parser.parse_args()

if not options.data and len(args) == 0:
    parser.print_help()
    exit(-1)

from sys import exit
from rooplot import make_page
from rooplot import atlas_style, get_legend, get_lumi_label, set_styles, stack_1D, plot_1D, draw_preliminary

from os import makedirs
from uncertain import UncertainNumber, CertainNumber
if options.output:
    try:
        makedirs(options.output)
    except OSError:
        pass



disp = "1.02 fb^{-1}"

from atfile import ATFile

bg_files = [ATFile(fn) for fn in args]
sg_files = [ATFile(fn) for fn in options.signal]
data_files = [ATFile(d) for d in options.data]

histos_1d = sorted(set(sum((f.find_type("TH1D") for f in data_files+bg_files+sg_files), [])))
if not options.all:
    histos_1d = [h for h in histos_1d if h in options.histogram]

prefix = options.output
histograms = []

from ROOT import TCanvas, kRed, TH1D
for hn in histos_1d:
    data_fns = [f.fn for f in data_files if hn in f.dir]
    bg_fns = [f.fn for f in bg_files if hn in f.dir]
    sg_fns = [f.fn for f in sg_files if hn in f.dir]
    data = [f.get(hn) for f in data_files if hn in f.dir]
    bg = [f.get(hn) for f in bg_files if hn in f.dir]
    sg = [f.get(hn) for f in sg_files if hn in f.dir]
    if not (data+bg+sg)[0].GetXaxis().GetBinLabel(1):
        continue

    for h in data+bg+sg:
        h.SetDirectory(0)

    for h, orig_fn in zip(data+bg+sg, data_fns+bg_fns+sg_fns):
        if not h.GetTitle():
            h.SetTitle(orig_fn.rstrip(".root"))

    # Deal with cutflow histograms
    labels = map(str, (data+sg+bg)[0].GetXaxis().GetLabels())
    for h in data+sg+bg:
        for label in map(str,h.GetXaxis().GetLabels()):
            if not label in labels:
                labels.append(labe)

    def get_cf_data(h):
        datad = {}
        for label in labels:
            oi = h.GetXaxis().FindBin(label)
            datad[label] = CertainNumber(h.GetBinContent(oi)) if oi != -1 else CertainNumber(0)
        return "Observed", datad

    def get_cf_sg(h):
        datad = {}
        for label in labels:
            oi = h.GetXaxis().FindBin(label)
            datad[label] = UncertainNumber(h.GetBinContent(oi), h.GetBinError(oi)) if oi != -1 else UncertainNumber(0.0,0.0)
        return h.GetTitle(), datad

    sumbg = {}
    def get_cf_bg(h):
        datad = {}
        for label in labels:
            oi = h.GetXaxis().FindBin(label)
            datad[label] = UncertainNumber(h.GetBinContent(oi), h.GetBinError(oi)) if oi != -1 else UncertainNumber(0.0,0.0)
            sumbg[label] = sumbg.get(label, UncertainNumber(0,0)) + datad[label]
        return h.GetTitle(), datad

    data = map(get_cf_data, data)
    sg = map(get_cf_sg, sg)
    bg = map(get_cf_bg, bg)

    table = []
    table.append([""] + ["$%s$"%l.replace("#","\\") for l in labels])
    for (title, numbers) in bg + [("Total SM",sumbg)] + data + sg:
        if "#" in title:
            title = "$%s$"%title.replace("#","\\")
        if options.ndigits != -1:
            fstr = "%%.%if" % int(options.ndigits)
            table.append([title] + [fstr%(numbers.get(label, UncertainNumber(0,0)).n) for label in labels])
        else:
            table.append([title] + [numbers.get(label, UncertainNumber(0,0)).latex() for label in labels])

    widths_h = [max(len(line[i]) for line in table) for i in range(len(table[0]))]
    widths_v = [max(len(w) for w in line) for line in table]

    # vertical
    t = ["\\begin{tabular}{c%s}" % ("|".join("r" for i in range(len(widths_h))))]
    t.append("\hline\hline")
    for l in table:
        t.append(" & ".join(("%%%is"%w)%e for w, e in zip(widths_h, l)) + "\\\\")
        if l == table[0]:
            t.append("\hline")
    t.append("\hline\hline")
    t.append("\end{tabular}")

    #print "\n".join(t)

    # horizontal
    t = []
    if options.latex:
        t.append("\\documentclass{article}\\usepackage{lscape}\\begin{document}\\begin{landscape}\\begin{table}\\begin{tiny}\n")
    t.append("\\begin{tabular}{c|%s%s%s}" % (("c"*(len(bg)+1)),("|c" if data else ""), ("|c"*len(sg))))
    t.append("\hline\hline")
    for i in range(len(table[0])):
        ln = []
        for w, e in zip(widths_v, (line[i] for line in table)):
            ln.append(("%%%is"%w)%e)
        t.append(" & ".join(ln) + "\\\\")
        if i == 0:
            t.append("\hline")
    t.append("\hline\hline")
    t.append("\end{tabular}")
    if options.latex:
        t.append("\n\\end{tiny}\\end{table}\\end{landscape}\\end{document}")
    print "\n".join(t)



    
