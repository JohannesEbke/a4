package a4.atlas.ntup.smwz;
import "a4/root/RootExtension.proto";

message TrigMuonEFInfo {
    optional int32 EF_2mu10 = 1 [(root_branch)="EF_2mu10"];
    optional int32 EF_2mu10_empty = 2 [(root_branch)="EF_2mu10_empty"];
    optional int32 EF_2mu10_loose = 3 [(root_branch)="EF_2mu10_loose"];
    optional int32 EF_2mu10_loose_empty = 4 [(root_branch)="EF_2mu10_loose_empty"];
    optional int32 EF_2mu10_loose_noOvlpRm = 5 [(root_branch)="EF_2mu10_loose_noOvlpRm"];
    optional int32 EF_2mu13_Zmumu_IDTrkNoCut = 6 [(root_branch)="EF_2mu13_Zmumu_IDTrkNoCut"];
    optional int32 EF_2mu4 = 7 [(root_branch)="EF_2mu4"];
    optional int32 EF_2mu4_Bmumu = 8 [(root_branch)="EF_2mu4_Bmumu"];
    optional int32 EF_2mu4_Bmumux = 9 [(root_branch)="EF_2mu4_Bmumux"];
    optional int32 EF_2mu4_DiMu = 10 [(root_branch)="EF_2mu4_DiMu"];
    optional int32 EF_2mu4_DiMu_DY = 11 [(root_branch)="EF_2mu4_DiMu_DY"];
    optional int32 EF_2mu4_DiMu_DY20 = 12 [(root_branch)="EF_2mu4_DiMu_DY20"];
    optional int32 EF_2mu4_DiMu_DY_noVtx_noOS = 13 [(root_branch)="EF_2mu4_DiMu_DY_noVtx_noOS"];
    optional int32 EF_2mu4_DiMu_SiTrk = 14 [(root_branch)="EF_2mu4_DiMu_SiTrk"];
    optional int32 EF_2mu4_DiMu_noVtx_noOS = 15 [(root_branch)="EF_2mu4_DiMu_noVtx_noOS"];
    optional int32 EF_2mu4_Jpsimumu = 16 [(root_branch)="EF_2mu4_Jpsimumu"];
    optional int32 EF_2mu4_Jpsimumu_IDTrkNoCut = 17 [(root_branch)="EF_2mu4_Jpsimumu_IDTrkNoCut"];
    optional int32 EF_2mu4_Upsimumu = 18 [(root_branch)="EF_2mu4_Upsimumu"];
    optional int32 EF_2mu4i_DiMu_DY = 19 [(root_branch)="EF_2mu4i_DiMu_DY"];
    optional int32 EF_2mu6 = 20 [(root_branch)="EF_2mu6"];
    optional int32 EF_2mu6_MSonly_g10_loose = 21 [(root_branch)="EF_2mu6_MSonly_g10_loose"];
    optional int32 EF_2mu6_MSonly_g10_loose_nonfilled = 22 [(root_branch)="EF_2mu6_MSonly_g10_loose_nonfilled"];
    optional int32 EF_2mu6_NL = 23 [(root_branch)="EF_2mu6_NL"];
    optional int32 EF_mu0_empty_NoAlg = 24 [(root_branch)="EF_mu0_empty_NoAlg"];
    optional int32 EF_mu0_firstempty_NoAlg = 25 [(root_branch)="EF_mu0_firstempty_NoAlg"];
    optional int32 EF_mu0_unpaired_iso_NoAlg = 26 [(root_branch)="EF_mu0_unpaired_iso_NoAlg"];
    optional int32 EF_mu10 = 27 [(root_branch)="EF_mu10"];
    optional int32 EF_mu10_Jpsimumu = 28 [(root_branch)="EF_mu10_Jpsimumu"];
    optional int32 EF_mu10_NL = 29 [(root_branch)="EF_mu10_NL"];
    optional int32 EF_mu10_Upsimumu_FS = 30 [(root_branch)="EF_mu10_Upsimumu_FS"];
    optional int32 EF_mu10_Upsimumu_tight_FS = 31 [(root_branch)="EF_mu10_Upsimumu_tight_FS"];
    optional int32 EF_mu10_loose = 32 [(root_branch)="EF_mu10_loose"];
    optional int32 EF_mu10_muCombTag_NoEF = 33 [(root_branch)="EF_mu10_muCombTag_NoEF"];
    optional int32 EF_mu11_empty_NoAlg = 34 [(root_branch)="EF_mu11_empty_NoAlg"];
    optional int32 EF_mu13 = 35 [(root_branch)="EF_mu13"];
    optional int32 EF_mu13_MG = 36 [(root_branch)="EF_mu13_MG"];
    optional int32 EF_mu13_muCombTag_NoEF = 37 [(root_branch)="EF_mu13_muCombTag_NoEF"];
    optional int32 EF_mu15 = 38 [(root_branch)="EF_mu15"];
    optional int32 EF_mu15_mu10_EFFS = 39 [(root_branch)="EF_mu15_mu10_EFFS"];
    optional int32 EF_mu15_mu10_EFFS_medium = 40 [(root_branch)="EF_mu15_mu10_EFFS_medium"];
    optional int32 EF_mu15i = 41 [(root_branch)="EF_mu15i"];
    optional int32 EF_mu15i_medium = 42 [(root_branch)="EF_mu15i_medium"];
    optional int32 EF_mu18 = 43 [(root_branch)="EF_mu18"];
    optional int32 EF_mu18_MG = 44 [(root_branch)="EF_mu18_MG"];
    optional int32 EF_mu18_MG_medium = 45 [(root_branch)="EF_mu18_MG_medium"];
    optional int32 EF_mu18_medium = 46 [(root_branch)="EF_mu18_medium"];
    optional int32 EF_mu20 = 47 [(root_branch)="EF_mu20"];
    optional int32 EF_mu20_IDTrkNoCut = 48 [(root_branch)="EF_mu20_IDTrkNoCut"];
    optional int32 EF_mu20_MG = 49 [(root_branch)="EF_mu20_MG"];
    optional int32 EF_mu20_MG_medium = 50 [(root_branch)="EF_mu20_MG_medium"];
    optional int32 EF_mu20_empty = 51 [(root_branch)="EF_mu20_empty"];
    optional int32 EF_mu20_medium = 52 [(root_branch)="EF_mu20_medium"];
    optional int32 EF_mu20_muCombTag_NoEF = 53 [(root_branch)="EF_mu20_muCombTag_NoEF"];
    optional int32 EF_mu20i = 54 [(root_branch)="EF_mu20i"];
    optional int32 EF_mu20i_medium = 55 [(root_branch)="EF_mu20i_medium"];
    optional int32 EF_mu22 = 56 [(root_branch)="EF_mu22"];
    optional int32 EF_mu22_MG = 57 [(root_branch)="EF_mu22_MG"];
    optional int32 EF_mu22_MG_medium = 58 [(root_branch)="EF_mu22_MG_medium"];
    optional int32 EF_mu22_medium = 59 [(root_branch)="EF_mu22_medium"];
    optional int32 EF_mu4 = 60 [(root_branch)="EF_mu4"];
    optional int32 EF_mu40_MSonly_barrel = 61 [(root_branch)="EF_mu40_MSonly_barrel"];
    optional int32 EF_mu40_MSonly_barrel_medium = 62 [(root_branch)="EF_mu40_MSonly_barrel_medium"];
    optional int32 EF_mu40_MSonly_empty = 63 [(root_branch)="EF_mu40_MSonly_empty"];
    optional int32 EF_mu40_MSonly_tight = 64 [(root_branch)="EF_mu40_MSonly_tight"];
    optional int32 EF_mu40_MSonly_tighter = 65 [(root_branch)="EF_mu40_MSonly_tighter"];
    optional int32 EF_mu40_slow = 66 [(root_branch)="EF_mu40_slow"];
    optional int32 EF_mu40_slow_empty = 67 [(root_branch)="EF_mu40_slow_empty"];
    optional int32 EF_mu40_slow_medium = 68 [(root_branch)="EF_mu40_slow_medium"];
    optional int32 EF_mu40_slow_outOfTime = 69 [(root_branch)="EF_mu40_slow_outOfTime"];
    optional int32 EF_mu4_DiMu = 70 [(root_branch)="EF_mu4_DiMu"];
    optional int32 EF_mu4_DiMu_FS_noOS = 71 [(root_branch)="EF_mu4_DiMu_FS_noOS"];
    optional int32 EF_mu4_Jpsimumu = 72 [(root_branch)="EF_mu4_Jpsimumu"];
    optional int32 EF_mu4_L1J10_matched = 73 [(root_branch)="EF_mu4_L1J10_matched"];
    optional int32 EF_mu4_L1J15_matched = 74 [(root_branch)="EF_mu4_L1J15_matched"];
    optional int32 EF_mu4_L1J20_matched = 75 [(root_branch)="EF_mu4_L1J20_matched"];
    optional int32 EF_mu4_L1J30_matched = 76 [(root_branch)="EF_mu4_L1J30_matched"];
    optional int32 EF_mu4_L1J50_matched = 77 [(root_branch)="EF_mu4_L1J50_matched"];
    optional int32 EF_mu4_L1J75_matched = 78 [(root_branch)="EF_mu4_L1J75_matched"];
    optional int32 EF_mu4_L1MU11_MSonly_cosmic = 79 [(root_branch)="EF_mu4_L1MU11_MSonly_cosmic"];
    optional int32 EF_mu4_L1MU11_cosmic = 80 [(root_branch)="EF_mu4_L1MU11_cosmic"];
    optional int32 EF_mu4_MSonly_cosmic = 81 [(root_branch)="EF_mu4_MSonly_cosmic"];
    optional int32 EF_mu4_Trk_Jpsi = 82 [(root_branch)="EF_mu4_Trk_Jpsi"];
    optional int32 EF_mu4_Trk_Upsi_FS = 83 [(root_branch)="EF_mu4_Trk_Upsi_FS"];
    optional int32 EF_mu4_Upsimumu_FS = 84 [(root_branch)="EF_mu4_Upsimumu_FS"];
    optional int32 EF_mu4_Upsimumu_SiTrk_FS = 85 [(root_branch)="EF_mu4_Upsimumu_SiTrk_FS"];
    optional int32 EF_mu4_Upsimumu_tight_FS = 86 [(root_branch)="EF_mu4_Upsimumu_tight_FS"];
    optional int32 EF_mu4_cosmic = 87 [(root_branch)="EF_mu4_cosmic"];
    optional int32 EF_mu4_j10_a4tc_EFFS = 88 [(root_branch)="EF_mu4_j10_a4tc_EFFS"];
    optional int32 EF_mu4_j135_a4tc_EFFS_L1matched = 89 [(root_branch)="EF_mu4_j135_a4tc_EFFS_L1matched"];
    optional int32 EF_mu4_j45_a4tc_EFFS_xe45_loose_noMu = 90 [(root_branch)="EF_mu4_j45_a4tc_EFFS_xe45_loose_noMu"];
    optional int32 EF_mu4mu6_Bmumu = 91 [(root_branch)="EF_mu4mu6_Bmumu"];
    optional int32 EF_mu4mu6_BmumuX = 92 [(root_branch)="EF_mu4mu6_BmumuX"];
    optional int32 EF_mu4mu6_DiMu = 93 [(root_branch)="EF_mu4mu6_DiMu"];
    optional int32 EF_mu4mu6_DiMu_noVtx_noOS = 94 [(root_branch)="EF_mu4mu6_DiMu_noVtx_noOS"];
    optional int32 EF_mu4mu6_Jpsimumu = 95 [(root_branch)="EF_mu4mu6_Jpsimumu"];
    optional int32 EF_mu4mu6_Upsimumu = 96 [(root_branch)="EF_mu4mu6_Upsimumu"];
    optional int32 EF_mu6 = 97 [(root_branch)="EF_mu6"];
    optional int32 EF_mu6_DiMu_noOS = 98 [(root_branch)="EF_mu6_DiMu_noOS"];
    optional int32 EF_mu6_Jpsimumu = 99 [(root_branch)="EF_mu6_Jpsimumu"];
    optional int32 EF_mu6_Jpsimumu_SiTrk = 100 [(root_branch)="EF_mu6_Jpsimumu_SiTrk"];
    optional int32 EF_mu6_Jpsimumu_tight = 101 [(root_branch)="EF_mu6_Jpsimumu_tight"];
    optional int32 EF_mu6_Trk_Jpsi_loose = 102 [(root_branch)="EF_mu6_Trk_Jpsi_loose"];
    
    optional int32 track_n = 200 [(root_branch)="track_n"];
    repeated int32 track_MuonType = 201 [(root_branch)="track_MuonType"];
    repeated float track_MS_pt = 202 [(root_branch)="track_MS_pt"];
    repeated float track_MS_eta = 203 [(root_branch)="track_MS_eta"];
    repeated float track_MS_phi = 204 [(root_branch)="track_MS_phi"];
    repeated float track_MS_charge = 205 [(root_branch)="track_MS_charge"];
    repeated float track_MS_d0 = 206 [(root_branch)="track_MS_d0"];
    repeated float track_MS_z0 = 207 [(root_branch)="track_MS_z0"];
    repeated float track_MS_chi2 = 208 [(root_branch)="track_MS_chi2"];
    repeated float track_MS_chi2prob = 209 [(root_branch)="track_MS_chi2prob"];
    repeated float track_MS_posX = 210 [(root_branch)="track_MS_posX"];
    repeated float track_MS_posY = 211 [(root_branch)="track_MS_posY"];
    repeated float track_MS_posZ = 212 [(root_branch)="track_MS_posZ"];
    repeated int32 track_MS_hasMS = 213 [(root_branch)="track_MS_hasMS"];
    repeated float track_SA_pt = 214 [(root_branch)="track_SA_pt"];
    repeated float track_SA_eta = 215 [(root_branch)="track_SA_eta"];
    repeated float track_SA_phi = 216 [(root_branch)="track_SA_phi"];
    repeated float track_SA_charge = 217 [(root_branch)="track_SA_charge"];
    repeated float track_SA_d0 = 218 [(root_branch)="track_SA_d0"];
    repeated float track_SA_z0 = 219 [(root_branch)="track_SA_z0"];
    repeated float track_SA_chi2 = 220 [(root_branch)="track_SA_chi2"];
    repeated float track_SA_chi2prob = 221 [(root_branch)="track_SA_chi2prob"];
    repeated float track_SA_posX = 222 [(root_branch)="track_SA_posX"];
    repeated float track_SA_posY = 223 [(root_branch)="track_SA_posY"];
    repeated float track_SA_posZ = 224 [(root_branch)="track_SA_posZ"];
    repeated int32 track_SA_hasSA = 225 [(root_branch)="track_SA_hasSA"];
    repeated float track_CB_pt = 226 [(root_branch)="track_CB_pt"];
    repeated float track_CB_eta = 227 [(root_branch)="track_CB_eta"];
    repeated float track_CB_phi = 228 [(root_branch)="track_CB_phi"];
    repeated float track_CB_charge = 229 [(root_branch)="track_CB_charge"];
    repeated float track_CB_d0 = 230 [(root_branch)="track_CB_d0"];
    repeated float track_CB_z0 = 231 [(root_branch)="track_CB_z0"];
    repeated float track_CB_chi2 = 232 [(root_branch)="track_CB_chi2"];
    repeated float track_CB_chi2prob = 233 [(root_branch)="track_CB_chi2prob"];
    repeated float track_CB_posX = 234 [(root_branch)="track_CB_posX"];
    repeated float track_CB_posY = 235 [(root_branch)="track_CB_posY"];
    repeated float track_CB_posZ = 236 [(root_branch)="track_CB_posZ"];
    repeated float track_CB_matchChi2 = 237 [(root_branch)="track_CB_matchChi2"];
    repeated int32 track_CB_hasCB = 238 [(root_branch)="track_CB_hasCB"];
}