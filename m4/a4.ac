AC_CONFIG_MACRO_DIR([m4])

# specify language
AC_PROG_CC_C_O
AC_PROG_CXX([g++46 g++4.6 g++-4.6 g++45 g++4.5 g++-4.5 g++44 g++4.4 g++-4.4 g++ gcc cl KCC CC cxx cc++ xlC aCC c++])
AC_LANG([C++])
AC_LANG_CXX_0X
AM_PATH_PYTHON([2.6])
m4_ifdef([LT_INIT], [LT_INIT], [AC_PROG_LIBTOOL])

# Conditionally enable silent rules
m4_ifdef([AM_SILENT_RULES],[
    AM_SILENT_RULES([yes])
    # introduce manually the PROTOC prefix for silent rules if they are there.
    # ‘@&t@’ expands to nothing, so we can use it to prevent warnings about
    # a missing macro
A4_SET_AM_V_PROTOC='
A@&t@M_V_PROTOC = $(am__v_PROTOC_$(V))
am__v_PROTOC_ = $(am__v_PROTOC_$(AM_DEFAULT_VERBOSITY))
am__v_PROTOC_0 = @echo "  PROTOC" $@;'

    AC_SUBST(A4_SET_AM_V_PROTOC)
],[
    AC_SUBST([A4_SET_AM_V_PROTOC],[])
])

A4_PROTOBUF_CHECK([:],[AC_MSG_ERROR([A4 requires the google protobuf library, which configure could not find! Run ./get_protobuf.sh in your a4 directory to setup a 'builtin' copy and rerun configure.])])
A4_SNAPPY_CHECK([:],[AC_MSG_ERROR([A4 requires the google snappy library, which configure could not find! Run $srcdir/get_snappy.sh to setup a 'builtin' copy and rerun configure.])])
A4_BOOST_CHECK([:],[AC_MSG_ERROR([A4 requires the C++ boost library version >= 1.43, which configure could not find! Run ./get_miniboost.sh" in your a4 directory to setup a 'builtin' copy of the required part of boost and rerun configure.])])

A4_CERN_ROOT_SYSTEM_CHECK([:],[AC_MSG_ERROR([a4root requires the CERN ROOT library. http://root.cern.ch/])])

AC_CONFIG_FILES([m4/this_a4.sh.in:m4/this_a4.sh.ac])

# only set the following variables if we configure an a4 package separately
if test x$PACKAGE_NAME != xa4; then
    AC_SUBST([A4_THIS_SCRIPT],[this_a4.sh])
    AC_SUBST([A4_THIS_SCRIPT_IN],[m4/this_a4.sh.in])
fi

A4_INIT
