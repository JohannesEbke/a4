#!/usr/bin/env python
from sys import argv, exit
from a4 import A4ReaderStream
from a4.messages import Event, Results

from optparse import OptionParser
parser = OptionParser()
parser.add_option("-r", "--results", action="store_true", help="extract number from results files")
(options, args) = parser.parse_args()

if len(args) == 0:
    parser.print_help()
    exit(-1)

run_counts = {}
for fn in args:
    print fn
    if options.results:
        #guessed_rn = "user.ebke.20110705165911.task_16.subtask_1.mc10_7TeV.105200.T1_McAtNlo_Jimmy.merge.AOD.FZK-LCG2_SCRATCHDISK/"
        guessed_rn = int([s for s in fn.split(".") if s.isdigit() and len(s) == 6][0])
        print "guessed rn %i from %s" % (guessed_rn, fn)
        r = Results()
        r.ParseFromString(file(fn).read())
        effective_n = [cf for cf in r.cutflow if cf.name == "cutflow_mc_scaled"][0].counts_double[0]
        run_counts[guessed_rn] = run_counts.get(guessed_rn, 0) + effective_n
    else:
        reader = A4ReaderStream(open(fn))
        reader.register(Event)
        try:
            for metadata in reader.metadata.values():
                if metadata.simulation:
                    for run in metadata.run_info:
                        if run.sum_mc_weights != 0:
                            run_counts[int(run.run_number)] = run_counts.get(run.run_number, 0) + run.event_count
                        else:
                            raise RuntimeError("oh my...")
        except RuntimeError:
            while True:
                evt = reader.read()
                if not isinstance(evt, Event):
                    continue
                if evt:
                    rn = int(evt.run_number)
                    run_counts[rn] = run_counts.get(rn, 0) + evt.mc_event_weight
                else:
                    break

f = file("mc_counts","w")
missing = []
for run, count in sorted(run_counts.items()):
    f.write("%s %s\n" % (run, count))
