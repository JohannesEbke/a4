import "a4/root/RootExtension.proto";

message TrigElectron {
    
    optional float E = 1 [(root_branch)="E"]; 
    optional float Et = 2 [(root_branch)="Et"]; 
    optional float pt = 3 [(root_branch)="pt"]; 
    optional float eta = 4 [(root_branch)="eta"]; 
    optional float phi = 5 [(root_branch)="phi"]; 
    
    optional int32 RoIWord = 100 [(root_branch)="RoIWord"]; 
    
    optional float zvertex = 200 [(root_branch)="zvertex"]; 
    
    optional int32 charge = 300 [(root_branch)="charge"]; 
    
    optional int32 trackAlgo = 400 [(root_branch)="trackAlgo"]; 
    
    optional float TRTHighTHitsRatio = 500 [(root_branch)="TRTHighTHitsRatio"]; 
    
    optional float deltaeta1 = 600 [(root_branch)="deltaeta1"]; 
    optional float deltaphi2 = 601 [(root_branch)="deltaphi2"]; 
    
    optional float EtOverPt = 700 [(root_branch)="EtOverPt"]; 
    optional float reta = 701 [(root_branch)="reta"]; 
    optional float Eratio = 702 [(root_branch)="Eratio"]; 
    optional float Ethad1 = 703 [(root_branch)="Ethad1"]; 
    
    optional int32 nTRTHits = 800 [(root_branch)="nTRTHits"]; 
    optional int32 nTRTHighTHits = 801 [(root_branch)="nTRTHighTHits"]; 
    
    optional int32 trackIndx = 900 [(root_branch)="trackIndx"]; 
    optional float trkPt = 901 [(root_branch)="trkPt"]; 
    optional float trkEtaAtCalo = 902 [(root_branch)="trkEtaAtCalo"]; 
    optional float trkPhiAtCalo = 903 [(root_branch)="trkPhiAtCalo"]; 
    
    optional float caloEta = 1000 [(root_branch)="caloEta"]; 
    optional float caloPhi = 1001 [(root_branch)="caloPhi"]; 
    
    optional float F1 = 1100 [(root_branch)="F1"]; 
    
    optional int32 L2_2e10_medium = 1200 [(root_branch)="L2_2e10_medium"]; 
    optional int32 L2_2e10_medium_mu6 = 1201 [(root_branch)="L2_2e10_medium_mu6"]; 
    optional int32 L2_2e12_medium = 1202 [(root_branch)="L2_2e12_medium"]; 
    optional int32 L2_2e15_loose = 1203 [(root_branch)="L2_2e15_loose"]; 
    optional int32 L2_2e5_medium = 1204 [(root_branch)="L2_2e5_medium"]; 
    optional int32 L2_2e5_medium_SiTrk = 1205 [(root_branch)="L2_2e5_medium_SiTrk"]; 
    optional int32 L2_2e5_medium_TRT = 1206 [(root_branch)="L2_2e5_medium_TRT"]; 
    optional int32 L2_2e5_tight = 1207 [(root_branch)="L2_2e5_tight"]; 
    optional int32 L2_2e5_tight_Jpsi = 1208 [(root_branch)="L2_2e5_tight_Jpsi"]; 
    optional int32 L2_e10_NoCut = 1209 [(root_branch)="L2_e10_NoCut"]; 
    optional int32 L2_e10_loose = 1210 [(root_branch)="L2_e10_loose"]; 
    optional int32 L2_e10_loose_mu10 = 1211 [(root_branch)="L2_e10_loose_mu10"]; 
    optional int32 L2_e10_loose_mu6 = 1212 [(root_branch)="L2_e10_loose_mu6"]; 
    optional int32 L2_e10_medium = 1213 [(root_branch)="L2_e10_medium"]; 
    optional int32 L2_e10_medium_2mu6 = 1214 [(root_branch)="L2_e10_medium_2mu6"]; 
    optional int32 L2_e10_medium_mu10 = 1215 [(root_branch)="L2_e10_medium_mu10"]; 
    optional int32 L2_e10_medium_mu6 = 1216 [(root_branch)="L2_e10_medium_mu6"]; 
    optional int32 L2_e15_HLTtighter = 1217 [(root_branch)="L2_e15_HLTtighter"]; 
    optional int32 L2_e15_loose = 1218 [(root_branch)="L2_e15_loose"]; 
    optional int32 L2_e15_medium = 1219 [(root_branch)="L2_e15_medium"]; 
    optional int32 L2_e15_medium_mu6 = 1220 [(root_branch)="L2_e15_medium_mu6"]; 
    optional int32 L2_e15_medium_xe30_noMu = 1221 [(root_branch)="L2_e15_medium_xe30_noMu"]; 
    optional int32 L2_e15_medium_xe35_noMu = 1222 [(root_branch)="L2_e15_medium_xe35_noMu"]; 
    optional int32 L2_e15_medium_xe40_noMu_loose = 1223 [(root_branch)="L2_e15_medium_xe40_noMu_loose"]; 
    
    optional int32 L2_e15_tight = 1300 [(root_branch)="L2_e15_tight"]; 
    optional int32 L2_e15_tight1 = 1301 [(root_branch)="L2_e15_tight1"]; 
    optional int32 L2_e15_tight_xe30_noMu = 1302 [(root_branch)="L2_e15_tight_xe30_noMu"]; 
    optional int32 L2_e18_medium = 1303 [(root_branch)="L2_e18_medium"]; 
    optional int32 L2_e18_tight = 1304 [(root_branch)="L2_e18_tight"]; 
    optional int32 L2_e20_loose = 1305 [(root_branch)="L2_e20_loose"]; 
    optional int32 L2_e20_loose_IDTrkNoCut = 1306 [(root_branch)="L2_e20_loose_IDTrkNoCut"]; 
    optional int32 L2_e20_loose_TRT = 1307 [(root_branch)="L2_e20_loose_TRT"]; 
    optional int32 L2_e20_loose_xe20 = 1308 [(root_branch)="L2_e20_loose_xe20"]; 
    optional int32 L2_e20_loose_xe20_noMu = 1309 [(root_branch)="L2_e20_loose_xe20_noMu"]; 
    optional int32 L2_e20_loose_xe30 = 1310 [(root_branch)="L2_e20_loose_xe30"]; 
    optional int32 L2_e20_loose_xe30_noMu = 1311 [(root_branch)="L2_e20_loose_xe30_noMu"]; 
    optional int32 L2_e20_medium = 1312 [(root_branch)="L2_e20_medium"]; 
    optional int32 L2_e20_medium1 = 1313 [(root_branch)="L2_e20_medium1"]; 
    optional int32 L2_e20_medium_IDTrkNoCut = 1314 [(root_branch)="L2_e20_medium_IDTrkNoCut"]; 
    optional int32 L2_e20_medium_SiTrk = 1315 [(root_branch)="L2_e20_medium_SiTrk"]; 
    optional int32 L2_e20_medium_TRT = 1316 [(root_branch)="L2_e20_medium_TRT"]; 
    optional int32 L2_e20_tight = 1317 [(root_branch)="L2_e20_tight"]; 
    optional int32 L2_e22_medium = 1318 [(root_branch)="L2_e22_medium"]; 
    optional int32 L2_e25_loose = 1319 [(root_branch)="L2_e25_loose"]; 
    optional int32 L2_e25_medium = 1320 [(root_branch)="L2_e25_medium"]; 
    optional int32 L2_e30_loose = 1321 [(root_branch)="L2_e30_loose"]; 
    optional int32 L2_e5_NoCut_L2SW = 1322 [(root_branch)="L2_e5_NoCut_L2SW"]; 
    optional int32 L2_e5_NoCut_Ringer = 1323 [(root_branch)="L2_e5_NoCut_Ringer"]; 
    optional int32 L2_e5_NoCut_firstempty = 1324 [(root_branch)="L2_e5_NoCut_firstempty"]; 
    optional int32 L2_e5_medium_mu4 = 1325 [(root_branch)="L2_e5_medium_mu4"]; 
    optional int32 L2_e5_medium_mu4_topoAngle_medium = 1326 [(root_branch)="L2_e5_medium_mu4_topoAngle_medium"]; 
    optional int32 L2_e5_medium_mu4_topoAngle_tight = 1327 [(root_branch)="L2_e5_medium_mu4_topoAngle_tight"]; 
    optional int32 L2_e5_tight = 1328 [(root_branch)="L2_e5_tight"]; 
    optional int32 L2_e5_tight_TRT = 1329 [(root_branch)="L2_e5_tight_TRT"]; 
    optional int32 L2_e5_tight_e4_etcut_Jpsi = 1330 [(root_branch)="L2_e5_tight_e4_etcut_Jpsi"]; 
    optional int32 L2_e5_tight_e4_etcut_Jpsi_SiTrk = 1331 [(root_branch)="L2_e5_tight_e4_etcut_Jpsi_SiTrk"]; 
    optional int32 L2_e5_tight_e4_etcut_Jpsi_TRT = 1332 [(root_branch)="L2_e5_tight_e4_etcut_Jpsi_TRT"]; 
    optional int32 L2_e5_tight_e5_NoCut = 1333 [(root_branch)="L2_e5_tight_e5_NoCut"]; 
    optional int32 L2_e5_tight_e5_NoCut_Jpsi = 1334 [(root_branch)="L2_e5_tight_e5_NoCut_Jpsi"]; 
    optional int32 L2_e5_tight_e7_etcut_Jpsi = 1335 [(root_branch)="L2_e5_tight_e7_etcut_Jpsi"]; 
    optional int32 L2_e5_tight_e9_etcut_Jpsi = 1336 [(root_branch)="L2_e5_tight_e9_etcut_Jpsi"]; 
    optional int32 L2_e5_tight_mu4_topoAngle_medium = 1337 [(root_branch)="L2_e5_tight_mu4_topoAngle_medium"]; 
    optional int32 L2_e5_tight_mu4_topoAngle_tight = 1338 [(root_branch)="L2_e5_tight_mu4_topoAngle_tight"]; 
    
    optional int32 L2_e60_loose = 1400 [(root_branch)="L2_e60_loose"]; 
    
    optional int32 L2_e9_tight_e5_tight_Jpsi = 1500 [(root_branch)="L2_e9_tight_e5_tight_Jpsi"]; 
    optional int32 L2_eb_physics = 1501 [(root_branch)="L2_eb_physics"]; 
    optional int32 L2_eb_physics_empty = 1502 [(root_branch)="L2_eb_physics_empty"]; 
    optional int32 L2_eb_physics_firstempty = 1503 [(root_branch)="L2_eb_physics_firstempty"]; 
    optional int32 L2_eb_physics_noL1PS = 1504 [(root_branch)="L2_eb_physics_noL1PS"]; 
    optional int32 L2_eb_physics_unpaired_iso = 1505 [(root_branch)="L2_eb_physics_unpaired_iso"]; 
    optional int32 L2_eb_physics_unpaired_noniso = 1506 [(root_branch)="L2_eb_physics_unpaired_noniso"]; 
    optional int32 L2_eb_random = 1507 [(root_branch)="L2_eb_random"]; 
    optional int32 L2_eb_random_empty = 1508 [(root_branch)="L2_eb_random_empty"]; 
    optional int32 L2_eb_random_firstempty = 1509 [(root_branch)="L2_eb_random_firstempty"]; 
    optional int32 L2_eb_random_unpaired_iso = 1510 [(root_branch)="L2_eb_random_unpaired_iso"]; 
    
    optional int32 L2_em105_passHLT = 1600 [(root_branch)="L2_em105_passHLT"]; 
    optional int32 L2_em3_empty_larcalib = 1601 [(root_branch)="L2_em3_empty_larcalib"]; 
    optional int32 L2_em5_empty_larcalib = 1602 [(root_branch)="L2_em5_empty_larcalib"]; 
    
    
}