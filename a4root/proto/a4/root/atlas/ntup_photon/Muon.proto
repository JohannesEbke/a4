import "a4/root/RootExtension.proto";

message Muon {
    
    optional float E = 1 [(root_branch)="E"]; 
    optional float pt = 2 [(root_branch)="pt"]; 
    optional float m = 3 [(root_branch)="m"]; 
    optional float eta = 4 [(root_branch)="eta"]; 
    optional float phi = 5 [(root_branch)="phi"]; 
    optional float px = 6 [(root_branch)="px"]; 
    optional float py = 7 [(root_branch)="py"]; 
    optional float pz = 8 [(root_branch)="pz"]; 
    
    optional float charge = 100 [(root_branch)="charge"]; 
    
    optional uint32 allauthor = 200 [(root_branch)="allauthor"]; 
    
    optional int32 hastrack = 300 [(root_branch)="hastrack"]; 
    
    optional float truth_dr = 400 [(root_branch)="truth_dr"]; 
    optional float truth_E = 401 [(root_branch)="truth_E"]; 
    optional float truth_pt = 402 [(root_branch)="truth_pt"]; 
    optional float truth_eta = 403 [(root_branch)="truth_eta"]; 
    optional float truth_phi = 404 [(root_branch)="truth_phi"]; 
    optional int32 truth_type = 405 [(root_branch)="truth_type"]; 
    optional int32 truth_status = 406 [(root_branch)="truth_status"]; 
    optional int32 truth_barcode = 407 [(root_branch)="truth_barcode"]; 
    optional int32 truth_mothertype = 408 [(root_branch)="truth_mothertype"]; 
    optional int32 truth_motherbarcode = 409 [(root_branch)="truth_motherbarcode"]; 
    optional int32 truth_matched = 410 [(root_branch)="truth_matched"]; 
    
    optional int32 author = 500 [(root_branch)="author"]; 
    
    optional float beta = 600 [(root_branch)="beta"]; 
    
    optional float isMuonLikelihood = 700 [(root_branch)="isMuonLikelihood"]; 
    
    optional float matchchi2 = 800 [(root_branch)="matchchi2"]; 
    optional int32 matchndof = 801 [(root_branch)="matchndof"]; 
    
    optional float etcone20 = 900 [(root_branch)="etcone20"]; 
    optional float etcone30 = 901 [(root_branch)="etcone30"]; 
    optional float etcone40 = 902 [(root_branch)="etcone40"]; 
    optional float nucone20 = 903 [(root_branch)="nucone20"]; 
    optional float nucone30 = 904 [(root_branch)="nucone30"]; 
    optional float nucone40 = 905 [(root_branch)="nucone40"]; 
    optional float ptcone20 = 906 [(root_branch)="ptcone20"]; 
    optional float ptcone30 = 907 [(root_branch)="ptcone30"]; 
    optional float ptcone40 = 908 [(root_branch)="ptcone40"]; 
    
    optional float energyLossPar = 1000 [(root_branch)="energyLossPar"]; 
    optional float energyLossErr = 1001 [(root_branch)="energyLossErr"]; 
    
    optional float etCore = 1100 [(root_branch)="etCore"]; 
    
    optional float energyLossType = 1200 [(root_branch)="energyLossType"]; 
    
    optional uint32 caloMuonIdTag = 1300 [(root_branch)="caloMuonIdTag"]; 
    optional double caloLRLikelihood = 1301 [(root_branch)="caloLRLikelihood"]; 
    
    optional int32 bestMatch = 1400 [(root_branch)="bestMatch"]; 
    
    optional int32 isStandAloneMuon = 1500 [(root_branch)="isStandAloneMuon"]; 
    optional int32 isCombinedMuon = 1501 [(root_branch)="isCombinedMuon"]; 
    optional int32 isLowPtReconstructedMuon = 1502 [(root_branch)="isLowPtReconstructedMuon"]; 
    optional int32 isSegmentTaggedMuon = 1503 [(root_branch)="isSegmentTaggedMuon"]; 
    optional int32 isCaloMuonId = 1504 [(root_branch)="isCaloMuonId"]; 
    
    optional int32 alsoFoundByLowPt = 1600 [(root_branch)="alsoFoundByLowPt"]; 
    optional int32 alsoFoundByCaloMuonId = 1601 [(root_branch)="alsoFoundByCaloMuonId"]; 
    
    optional int32 loose = 1700 [(root_branch)="loose"]; 
    optional int32 medium = 1701 [(root_branch)="medium"]; 
    optional int32 tight = 1702 [(root_branch)="tight"]; 
    
    
}