package ntup_smwz;
import "a4/root/RootExtension.proto";

message Track {
    optional float d0 = 1 [(root_branch)="d0"];
    optional float z0 = 2 [(root_branch)="z0"];
    
    optional float phi = 100 [(root_branch)="phi"];
    
    optional float theta = 200 [(root_branch)="theta"];
    
    optional float qoverp = 300 [(root_branch)="qoverp"];
    
    optional float pt = 400 [(root_branch)="pt"];
    optional float eta = 401 [(root_branch)="eta"];
    
    optional float err_d0 = 500 [(root_branch)="err_d0"];
    optional float err_z0 = 501 [(root_branch)="err_z0"];
    optional float err_phi = 502 [(root_branch)="err_phi"];
    optional float err_theta = 503 [(root_branch)="err_theta"];
    optional float err_qoverp = 504 [(root_branch)="err_qoverp"];
    
    optional float d0_wrtPV = 600 [(root_branch)="d0_wrtPV"];
    optional float z0_wrtPV = 601 [(root_branch)="z0_wrtPV"];
    optional float phi_wrtPV = 602 [(root_branch)="phi_wrtPV"];
    optional float err_d0_wrtPV = 603 [(root_branch)="err_d0_wrtPV"];
    optional float err_z0_wrtPV = 604 [(root_branch)="err_z0_wrtPV"];
    optional float err_phi_wrtPV = 605 [(root_branch)="err_phi_wrtPV"];
    optional float err_theta_wrtPV = 606 [(root_branch)="err_theta_wrtPV"];
    optional float err_qoverp_wrtPV = 607 [(root_branch)="err_qoverp_wrtPV"];
    optional float cov_d0_z0_wrtPV = 608 [(root_branch)="cov_d0_z0_wrtPV"];
    optional float cov_d0_phi_wrtPV = 609 [(root_branch)="cov_d0_phi_wrtPV"];
    optional float cov_d0_theta_wrtPV = 610 [(root_branch)="cov_d0_theta_wrtPV"];
    optional float cov_d0_qoverp_wrtPV = 611 [(root_branch)="cov_d0_qoverp_wrtPV"];
    optional float cov_z0_phi_wrtPV = 612 [(root_branch)="cov_z0_phi_wrtPV"];
    optional float cov_z0_theta_wrtPV = 613 [(root_branch)="cov_z0_theta_wrtPV"];
    optional float cov_z0_qoverp_wrtPV = 614 [(root_branch)="cov_z0_qoverp_wrtPV"];
    optional float cov_phi_theta_wrtPV = 615 [(root_branch)="cov_phi_theta_wrtPV"];
    optional float cov_phi_qoverp_wrtPV = 616 [(root_branch)="cov_phi_qoverp_wrtPV"];
    optional float cov_theta_qoverp_wrtPV = 617 [(root_branch)="cov_theta_qoverp_wrtPV"];
    
    optional float chi2 = 700 [(root_branch)="chi2"];
    
    optional int32 ndof = 800 [(root_branch)="ndof"];
    
    optional int32 nBLHits = 900 [(root_branch)="nBLHits"];
    optional int32 nPixHits = 901 [(root_branch)="nPixHits"];
    optional int32 nSCTHits = 902 [(root_branch)="nSCTHits"];
    optional int32 nTRTHits = 903 [(root_branch)="nTRTHits"];
    optional int32 nTRTHighTHits = 904 [(root_branch)="nTRTHighTHits"];
    
    optional int32 nPixHoles = 1000 [(root_branch)="nPixHoles"];
    optional int32 nSCTHoles = 1001 [(root_branch)="nSCTHoles"];
    optional int32 nTRTHoles = 1002 [(root_branch)="nTRTHoles"];
    
    optional int32 nBLayerOutliers = 1100 [(root_branch)="nBLayerOutliers"];
    optional int32 nPixelOutliers = 1101 [(root_branch)="nPixelOutliers"];
    optional int32 nSCTOutliers = 1102 [(root_branch)="nSCTOutliers"];
    optional int32 nTRTOutliers = 1103 [(root_branch)="nTRTOutliers"];
    optional int32 nTRTHighTOutliers = 1104 [(root_branch)="nTRTHighTOutliers"];
    
    optional int32 nContribPixelLayers = 1200 [(root_branch)="nContribPixelLayers"];
    optional int32 nGangedPixels = 1201 [(root_branch)="nGangedPixels"];
    optional int32 nGangedFlaggedFakes = 1202 [(root_branch)="nGangedFlaggedFakes"];
    
    optional int32 nPixelDeadSensors = 1300 [(root_branch)="nPixelDeadSensors"];
    optional int32 nPixelSpoiltHits = 1301 [(root_branch)="nPixelSpoiltHits"];
    
    optional int32 nSCTDoubleHoles = 1400 [(root_branch)="nSCTDoubleHoles"];
    optional int32 nSCTDeadSensors = 1401 [(root_branch)="nSCTDeadSensors"];
    optional int32 nSCTSpoiltHits = 1402 [(root_branch)="nSCTSpoiltHits"];
    
    optional int32 nTRTDeadStraws = 1500 [(root_branch)="nTRTDeadStraws"];
    optional int32 nTRTTubeHits = 1501 [(root_branch)="nTRTTubeHits"];
    
    optional int32 nOutliersOnTrack = 1600 [(root_branch)="nOutliersOnTrack"];
    
    optional int32 standardDeviationOfChi2OS = 1700 [(root_branch)="standardDeviationOfChi2OS"];
    
    optional int32 expectBLayerHit = 1800 [(root_branch)="expectBLayerHit"];
    
    optional int32 nMDTHits = 1900 [(root_branch)="nMDTHits"];
    optional int32 nCSCEtaHits = 1901 [(root_branch)="nCSCEtaHits"];
    optional int32 nCSCPhiHits = 1902 [(root_branch)="nCSCPhiHits"];
    optional int32 nRPCEtaHits = 1903 [(root_branch)="nRPCEtaHits"];
    optional int32 nRPCPhiHits = 1904 [(root_branch)="nRPCPhiHits"];
    optional int32 nTGCEtaHits = 1905 [(root_branch)="nTGCEtaHits"];
    optional int32 nTGCPhiHits = 1906 [(root_branch)="nTGCPhiHits"];
    optional int32 nHits = 1907 [(root_branch)="nHits"];
    optional int32 nHoles = 1908 [(root_branch)="nHoles"];
    
    optional int32 hitPattern = 2000 [(root_branch)="hitPattern"];
    
    optional float TRTHighTHitsRatio = 2100 [(root_branch)="TRTHighTHitsRatio"];
    optional float TRTHighTOutliersRatio = 2101 [(root_branch)="TRTHighTOutliersRatio"];
    
}