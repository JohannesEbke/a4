package a4.root.atlas.ntup_smwz;
import "a4/root/RootExtension.proto";

message Tau {
    optional float Et = 1 [(root_branch)="Et"];
    optional float pt = 2 [(root_branch)="pt"];
    optional float m = 3 [(root_branch)="m"];
    optional float eta = 4 [(root_branch)="eta"];
    optional float phi = 5 [(root_branch)="phi"];
    
    optional float charge = 100 [(root_branch)="charge"];
    
    optional float BDTEleScore = 200 [(root_branch)="BDTEleScore"];
    optional float BDTJetScore = 201 [(root_branch)="BDTJetScore"];
    
    optional float likelihood = 300 [(root_branch)="likelihood"];
    optional float SafeLikelihood = 301 [(root_branch)="SafeLikelihood"];
    
    optional int32 electronVetoLoose = 400 [(root_branch)="electronVetoLoose"];
    optional int32 electronVetoMedium = 401 [(root_branch)="electronVetoMedium"];
    optional int32 electronVetoTight = 402 [(root_branch)="electronVetoTight"];
    optional int32 muonVeto = 403 [(root_branch)="muonVeto"];
    
    optional int32 tauCutLoose = 500 [(root_branch)="tauCutLoose"];
    optional int32 tauCutMedium = 501 [(root_branch)="tauCutMedium"];
    optional int32 tauCutTight = 502 [(root_branch)="tauCutTight"];
    
    optional int32 tauLlhLoose = 600 [(root_branch)="tauLlhLoose"];
    optional int32 tauLlhMedium = 601 [(root_branch)="tauLlhMedium"];
    optional int32 tauLlhTight = 602 [(root_branch)="tauLlhTight"];
    
    optional int32 JetBDTSigLoose = 700 [(root_branch)="JetBDTSigLoose"];
    optional int32 JetBDTSigMedium = 701 [(root_branch)="JetBDTSigMedium"];
    optional int32 JetBDTSigTight = 702 [(root_branch)="JetBDTSigTight"];
    
    optional int32 EleBDTLoose = 800 [(root_branch)="EleBDTLoose"];
    optional int32 EleBDTMedium = 801 [(root_branch)="EleBDTMedium"];
    optional int32 EleBDTTight = 802 [(root_branch)="EleBDTTight"];
    
    optional int32 author = 900 [(root_branch)="author"];
    
    optional int32 ROIword = 1000 [(root_branch)="ROIword"];
    
    optional int32 nProng = 1100 [(root_branch)="nProng"];
    
    optional int32 numTrack = 1200 [(root_branch)="numTrack"];
    optional int32 seedCalo_numTrack = 1201 [(root_branch)="seedCalo_numTrack"];
    
    optional float etOverPtLeadTrk = 1300 [(root_branch)="etOverPtLeadTrk"];
    optional float ipZ0SinThetaSigLeadTrk = 1301 [(root_branch)="ipZ0SinThetaSigLeadTrk"];
    
    optional float leadTrkPt = 1400 [(root_branch)="leadTrkPt"];
    optional int32 nLooseTrk = 1401 [(root_branch)="nLooseTrk"];
    optional int32 nLooseConvTrk = 1402 [(root_branch)="nLooseConvTrk"];
    optional int32 nProngLoose = 1403 [(root_branch)="nProngLoose"];
    
    optional float ipSigLeadTrk = 1500 [(root_branch)="ipSigLeadTrk"];
    optional float ipSigLeadLooseTrk = 1501 [(root_branch)="ipSigLeadLooseTrk"];
    optional float etOverPtLeadLooseTrk = 1502 [(root_branch)="etOverPtLeadLooseTrk"];
    optional float leadLooseTrkPt = 1503 [(root_branch)="leadLooseTrkPt"];
    optional float chrgLooseTrk = 1504 [(root_branch)="chrgLooseTrk"];
    
    optional float massTrkSys = 1600 [(root_branch)="massTrkSys"];
    
    optional float trkWidth2 = 1700 [(root_branch)="trkWidth2"];
    optional float trFlightPathSig = 1701 [(root_branch)="trFlightPathSig"];
    
    optional float etEflow = 1800 [(root_branch)="etEflow"];
    optional float mEflow = 1801 [(root_branch)="mEflow"];
    
    optional int32 nPi0 = 1900 [(root_branch)="nPi0"];
    
    optional float ele_E237E277 = 2000 [(root_branch)="ele_E237E277"];
    
    optional float ele_PresamplerFraction = 2100 [(root_branch)="ele_PresamplerFraction"];
    optional float ele_ECALFirstFraction = 2101 [(root_branch)="ele_ECALFirstFraction"];
    
    optional float seedCalo_EMRadius = 2200 [(root_branch)="seedCalo_EMRadius"];
    optional float seedCalo_hadRadius = 2201 [(root_branch)="seedCalo_hadRadius"];
    optional float seedCalo_etEMAtEMScale = 2202 [(root_branch)="seedCalo_etEMAtEMScale"];
    optional float seedCalo_etHadAtEMScale = 2203 [(root_branch)="seedCalo_etHadAtEMScale"];
    optional float seedCalo_isolFrac = 2204 [(root_branch)="seedCalo_isolFrac"];
    optional float seedCalo_centFrac = 2205 [(root_branch)="seedCalo_centFrac"];
    optional float seedCalo_stripWidth2 = 2206 [(root_branch)="seedCalo_stripWidth2"];
    optional int32 seedCalo_nStrip = 2207 [(root_branch)="seedCalo_nStrip"];
    optional float seedCalo_etEMCalib = 2208 [(root_branch)="seedCalo_etEMCalib"];
    optional float seedCalo_etHadCalib = 2209 [(root_branch)="seedCalo_etHadCalib"];
    optional float seedCalo_eta = 2210 [(root_branch)="seedCalo_eta"];
    optional float seedCalo_phi = 2211 [(root_branch)="seedCalo_phi"];
    optional float seedCalo_nIsolLooseTrk = 2212 [(root_branch)="seedCalo_nIsolLooseTrk"];
    optional float seedCalo_trkAvgDist = 2213 [(root_branch)="seedCalo_trkAvgDist"];
    optional float seedCalo_trkRmsDist = 2214 [(root_branch)="seedCalo_trkRmsDist"];
    optional float seedCalo_caloIso = 2215 [(root_branch)="seedCalo_caloIso"];
    optional float seedCalo_caloIsoCorrected = 2216 [(root_branch)="seedCalo_caloIsoCorrected"];
    optional float seedCalo_dRmax = 2217 [(root_branch)="seedCalo_dRmax"];
    
    optional float seedCalo_lead2ClusterEOverAllClusterE = 2300 [(root_branch)="seedCalo_lead2ClusterEOverAllClusterE"];
    optional float seedCalo_lead3ClusterEOverAllClusterE = 2301 [(root_branch)="seedCalo_lead3ClusterEOverAllClusterE"];
    
    optional int32 numTopoClusters = 2400 [(root_branch)="numTopoClusters"];
    optional float numEffTopoClusters = 2401 [(root_branch)="numEffTopoClusters"];
    
    optional float topoInvMass = 2500 [(root_branch)="topoInvMass"];
    optional float effTopoInvMass = 2501 [(root_branch)="effTopoInvMass"];
    
    optional float topoMeanDeltaR = 2600 [(root_branch)="topoMeanDeltaR"];
    optional float effTopoMeanDeltaR = 2601 [(root_branch)="effTopoMeanDeltaR"];
    
    optional float numCells = 2700 [(root_branch)="numCells"];
    
    optional float seedTrk_EMRadius = 2800 [(root_branch)="seedTrk_EMRadius"];
    optional float seedTrk_isolFrac = 2801 [(root_branch)="seedTrk_isolFrac"];
    optional float seedTrk_etChrgHadOverSumTrkPt = 2802 [(root_branch)="seedTrk_etChrgHadOverSumTrkPt"];
    
    optional float seedTrk_isolFracWide = 2900 [(root_branch)="seedTrk_isolFracWide"];
    optional float seedTrk_etHadAtEMScale = 2901 [(root_branch)="seedTrk_etHadAtEMScale"];
    optional float seedTrk_etEMAtEMScale = 2902 [(root_branch)="seedTrk_etEMAtEMScale"];
    optional float seedTrk_etEMCL = 2903 [(root_branch)="seedTrk_etEMCL"];
    optional float seedTrk_etChrgEM = 2904 [(root_branch)="seedTrk_etChrgEM"];
    optional float seedTrk_etNeuEM = 2905 [(root_branch)="seedTrk_etNeuEM"];
    optional float seedTrk_etResNeuEM = 2906 [(root_branch)="seedTrk_etResNeuEM"];
    optional float seedTrk_hadLeakEt = 2907 [(root_branch)="seedTrk_hadLeakEt"];
    optional float seedTrk_sumEMCellEtOverLeadTrkPt = 2908 [(root_branch)="seedTrk_sumEMCellEtOverLeadTrkPt"];
    optional float seedTrk_secMaxStripEt = 2909 [(root_branch)="seedTrk_secMaxStripEt"];
    optional float seedTrk_stripWidth2 = 2910 [(root_branch)="seedTrk_stripWidth2"];
    optional int32 seedTrk_nStrip = 2911 [(root_branch)="seedTrk_nStrip"];
    optional float seedTrk_etChrgHad = 2912 [(root_branch)="seedTrk_etChrgHad"];
    optional int32 seedTrk_nOtherCoreTrk = 2913 [(root_branch)="seedTrk_nOtherCoreTrk"];
    optional int32 seedTrk_nIsolTrk = 2914 [(root_branch)="seedTrk_nIsolTrk"];
    optional float seedTrk_etIsolEM = 2915 [(root_branch)="seedTrk_etIsolEM"];
    optional float seedTrk_etIsolHad = 2916 [(root_branch)="seedTrk_etIsolHad"];
    
    optional float calcVars_etHad_EMScale_Pt3Trks = 3000 [(root_branch)="calcVars_etHad_EMScale_Pt3Trks"];
    optional float calcVars_etEM_EMScale_Pt3Trks = 3001 [(root_branch)="calcVars_etEM_EMScale_Pt3Trks"];
    optional float calcVars_ipSigLeadLooseTrk = 3002 [(root_branch)="calcVars_ipSigLeadLooseTrk"];
    optional float calcVars_drMin = 3003 [(root_branch)="calcVars_drMin"];
    optional float calcVars_TRTHTOverLT_LeadTrk = 3004 [(root_branch)="calcVars_TRTHTOverLT_LeadTrk"];
    optional float calcVars_calRadius = 3005 [(root_branch)="calcVars_calRadius"];
    optional float calcVars_EMFractionAtEMScale = 3006 [(root_branch)="calcVars_EMFractionAtEMScale"];
    optional float calcVars_trackIso = 3007 [(root_branch)="calcVars_trackIso"];
    optional int32 seedCalo_track_n = 3008 [(root_branch)="seedCalo_track_n"];
    optional int32 seedCalo_wideTrk_n = 3009 [(root_branch)="seedCalo_wideTrk_n"];
    optional int32 otherTrk_n = 3010 [(root_branch)="otherTrk_n"];
    
    optional float EF_dr = 3100 [(root_branch)="EF_dr"];
    optional float EF_E = 3101 [(root_branch)="EF_E"];
    optional float EF_Et = 3102 [(root_branch)="EF_Et"];
    optional float EF_pt = 3103 [(root_branch)="EF_pt"];
    optional float EF_eta = 3104 [(root_branch)="EF_eta"];
    optional float EF_phi = 3105 [(root_branch)="EF_phi"];
    optional int32 EF_matched = 3106 [(root_branch)="EF_matched"];
    
    optional float L2_dr = 3200 [(root_branch)="L2_dr"];
    optional float L2_E = 3201 [(root_branch)="L2_E"];
    optional float L2_Et = 3202 [(root_branch)="L2_Et"];
    optional float L2_pt = 3203 [(root_branch)="L2_pt"];
    optional float L2_eta = 3204 [(root_branch)="L2_eta"];
    optional float L2_phi = 3205 [(root_branch)="L2_phi"];
    optional int32 L2_matched = 3206 [(root_branch)="L2_matched"];
    optional float L1_dr = 3207 [(root_branch)="L1_dr"];
    optional float L1_Et = 3208 [(root_branch)="L1_Et"];
    optional float L1_pt = 3209 [(root_branch)="L1_pt"];
    optional float L1_eta = 3210 [(root_branch)="L1_eta"];
    optional float L1_phi = 3211 [(root_branch)="L1_phi"];
    optional int32 L1_matched = 3212 [(root_branch)="L1_matched"];
    
}